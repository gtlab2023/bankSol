/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface BankSolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ANNUAL_INTEREST_RATE"
      | "MAX_WITHDRAWAL_PERCENTAGE"
      | "SECONDS_PER_YEAR"
      | "deposits"
      | "deposit"
      | "calculateInterest"
      | "withdraw"
      | "withdrawAll"
      | "getContractBalance"
      | "getTotalBalance"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Deposit" | "InterestCalculated" | "Withdrawal"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ANNUAL_INTEREST_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_WITHDRAWAL_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECONDS_PER_YEAR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateInterest",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBalance",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ANNUAL_INTEREST_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_WITHDRAWAL_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECONDS_PER_YEAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBalance",
    data: BytesLike
  ): Result;
}

export namespace DepositEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InterestCalculatedEvent {
  export type InputTuple = [user: AddressLike, interest: BigNumberish];
  export type OutputTuple = [user: string, interest: bigint];
  export interface OutputObject {
    user: string;
    interest: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    interest: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, interest: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    interest: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BankSol extends BaseContract {
  connect(runner?: ContractRunner | null): BankSol;
  waitForDeployment(): Promise<this>;

  interface: BankSolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ANNUAL_INTEREST_RATE: TypedContractMethod<[], [bigint], "view">;

  MAX_WITHDRAWAL_PERCENTAGE: TypedContractMethod<[], [bigint], "view">;

  SECONDS_PER_YEAR: TypedContractMethod<[], [bigint], "view">;

  deposits: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        amount: bigint;
        timestamp: bigint;
        lastInterestCalculation: bigint;
      }
    ],
    "view"
  >;

  /**
   * 存入ETH并开始计算利息
   */
  deposit: TypedContractMethod<[], [void], "payable">;

  /**
   * 计算用户应得的利息
   * @param user 用户地址
   */
  calculateInterest: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  /**
   * 提取指定数量的ETH和对应的利息
   * @param amount 要提取的金额
   */
  withdraw: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  /**
   * 提取所有存款和利息
   * 为防止挤兑，该功能已禁用
   */
  withdrawAll: TypedContractMethod<[], [void], "view">;

  /**
   * 查询合约的总余额
   */
  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  /**
   * 查询用户的总余额（包含利息）
   * @param user 要查询的用户地址
   */
  getTotalBalance: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ANNUAL_INTEREST_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_WITHDRAWAL_PERCENTAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SECONDS_PER_YEAR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposits"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        amount: bigint;
        timestamp: bigint;
        lastInterestCalculation: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "calculateInterest"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawAll"
  ): TypedContractMethod<[], [void], "view">;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalBalance"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "InterestCalculated"
  ): TypedContractEvent<
    InterestCalculatedEvent.InputTuple,
    InterestCalculatedEvent.OutputTuple,
    InterestCalculatedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;

  filters: {
    "Deposit(address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "InterestCalculated(address,uint256)": TypedContractEvent<
      InterestCalculatedEvent.InputTuple,
      InterestCalculatedEvent.OutputTuple,
      InterestCalculatedEvent.OutputObject
    >;
    InterestCalculated: TypedContractEvent<
      InterestCalculatedEvent.InputTuple,
      InterestCalculatedEvent.OutputTuple,
      InterestCalculatedEvent.OutputObject
    >;

    "Withdrawal(address,uint256,uint256)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
  };
}
